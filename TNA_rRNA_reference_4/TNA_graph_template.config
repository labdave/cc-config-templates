[utils_consolidatesamplename__tna]
    module      = Utils
    submodule   = ConsolidateSampleName

[demuxtna__tna]
    module          = Docker
    docker_image    = cancer
    final_output    = demux_stats
    input_from      = utils_consolidatesamplename__tna

    [[args]]
        barcodes = AGTCGACATG, TCGACATG

        cpus = R1
        memory = 4

        inputs = R1, R2, sample_name, barcodes

        commands = """
        python -m Cancer.main demux_inline --r1 ${R1} --r2 ${R2} --barcode ${barcodes} --output ${OUTPUT_PATH} --name ${sample_name}

        cd ${OUTPUT_PATH}

        mv ${OUTPUT_PATH}R1_matched.fastq.gz ${OUTPUT_PATH}${sample_name}.RNA.R1.fastq.gz
        mv ${OUTPUT_PATH}R2_matched.fastq.gz ${OUTPUT_PATH}${sample_name}.RNA.R2.fastq.gz
        mv ${OUTPUT_PATH}R1_unmatched.fastq.gz ${OUTPUT_PATH}${sample_name}.non-RNA.R1.fastq.gz
        mv ${OUTPUT_PATH}R2_unmatched.fastq.gz ${OUTPUT_PATH}${sample_name}.non-RNA.R2.fastq.gz
        """

        [[[outputs]]]
            R1 = ${OUTPUT_PATH}${sample_name}.RNA.R1.fastq.gz, ${OUTPUT_PATH}${sample_name}.non-RNA.R1.fastq.gz
            R2 = ${OUTPUT_PATH}${sample_name}.RNA.R2.fastq.gz, ${OUTPUT_PATH}${sample_name}.non-RNA.R2.fastq.gz
            demux_stats = ${OUTPUT_PATH}all_barcode_stats.csv
            assay_type = rna, dna

[gatk_bedtointervallist__paddedontarget__tna]
    module       = GATK
    submodule    = BedToIntervalList
    docker_image = gatk4

    [[args]]
        gatk_version    = 4
        bed             = padded_target_bed
        ref             = ref
        ref_idx         = ref_idx
        ref_dict        = ref_dict

[gatk_bedtointervallist__ontarget__tna]
    module       = GATK
    submodule    = BedToIntervalList
    docker_image = gatk4

    [[args]]
        gatk_version    = 4
        bed             = target_bed
        ref             = ref
        ref_idx         = ref_idx
        ref_dict        = ref_dict

[gatk_bedtointervallist__primary__ontarget__tna]
    module       = GATK
    submodule    = BedToIntervalList
    docker_image = gatk4

    final_output = interval_list

    [[args]]
        bed             = target_bed_primary_ref
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx

[gatk_bedtointervallist__ontargetexome__tna]
    module       = GATK
    submodule    = BedToIntervalList
    docker_image = gatk4

    [[args]]
        gatk_version    = 4
        bed             = target_exonic_bed
        ref             = ref
        ref_idx         = ref_idx
        ref_dict        = ref_dict

[gatk_bedtointervallist__primary__ontargetexome__tna]
    module       = GATK
    submodule    = BedToIntervalList
    docker_image = gatk4

    [[args]]
        bed             = target_exonic_bed_primary_ref
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx

[utils_bgzipbed__tna]
    module          = Utils
    submodule       = BGZipBED
    docker_image    = bgzip

    [[args]]
        bed         = padded_target_bed

[utils_indexbed__tna]
    module          = Utils
    submodule       = IndexBED
    docker_image    = tabix

    input_from      = utils_bgzipbed__tna

####################### RNA Section
[utils_getdemuxfastq__rnafastqs__tna]
    module          = Utils
    submodule       = GetDemuxFASTQ

    input_from      = demuxtna__tna

    final_output    = R1, R2

    [[args]]
        keep_assay_type = RNA

[fastqc__raw__rna]
    module          = FastQC
    docker_image    = fastqc

    input_from      = utils_getdemuxfastq__rnafastqs__tna

    final_output    = R1_fastqc, R2_fastqc

    [[args]]
        mem     = 12

[trimmomatic__rna]
    module          = Trimmomatic
    docker_image    = trimmomatic

    input_from      = utils_getdemuxfastq__rnafastqs__tna

    final_output    = trim_report

    [[args]]
        MINLEN  = 25

[fastqc__trim__rna]
    module          = FastQC
    docker_image    = fastqc

    input_from      = trimmomatic__rna

    final_output    = R1_fastqc, R2_fastqc

    [[args]]
        mem     = 12

[utils_getreadgroup__rna]
    module          = Utils
    submodule       = GetReadGroup

    input_from      = trimmomatic__rna, utils_consolidatesamplename__tna

[bowtie2__rna]
    module          = Bowtie2
    docker_image    = bowtie2

    input_from      = trimmomatic__rna

    final_output    = bam, R1, R2

    [[args]]
        ref     = rrna_ref

[fastqc__bowtie2__rna]
    module          = FastQC
    docker_image    = fastqc

    input_from      = bowtie2__rna

    final_output    = R1_fastqc, R2_fastqc

    [[args]]
        mem     = 12

[samtools_index__bowtie2__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = bowtie2__rna

    final_output    = bam_idx

[star__rna]
    module          = Star
    docker_image    = star

    input_from      = bowtie2__rna, utils_getreadgroup__rna

    final_output    = transcriptome_mapped_bam, raw_read_counts, final_log

    [[args]]
        ref     = star_ref

[samtools_index__star__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = star__rna

[picard_markduplicates__rna]
    module          = Picard
    submodule       = MarkDuplicates
    docker_image    = picard

    input_from      = star__rna, samtools_index__star__rna

    final_output    = bam

[samtools_index__picard_markduplicates__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = picard_markduplicates__rna

    final_output    = bam_idx

[gatk_collectgcbiasmetrics__rna]
    module       = GATK
    submodule    = CollectGcBiasMetrics
    docker_image = gatk4

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    final_output    = gc_bias_matrics, gc_bias_plot, summary_matrics

    [[args]]
        gatk_version    = 4
        ref             = primary_ref
        ref_idx         = primary_ref_idx
        ref_dict        = primary_ref_dict

[rsem__rna]
    module          = RSEM
    docker_image    = rsem

    input_from      = star__rna

    final_output    = isoforms_results, genes_results

[utils_getreadnames__spliced__rna]
    module          = Utils
    submodule       = GetReadNames
    docker_image    = bedsam

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    final_output    = read_names

    [[args]]
        spliced_reads = True

[gatk_filtersamreads__spliced__rna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__spliced__rna, picard_markduplicates__rna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx
        include_reads   = True

[samtools_index__gatk_filtersamreads__spliced__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__spliced__rna

    final_output    = bam_idx

[utils_getreadnames__splicedexoniccaptured__rna]
    module          = Utils
    submodule       = GetReadNames
    docker_image    = bedsam

    input_from      = gatk_filtersamreads__spliced__rna

    final_output    = read_names

    [[args]]
        bed         = abcgcbscore_target_exonic_bed

[gatk_filtersamreads__splicedexoniccaptured__rna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__splicedexoniccaptured__rna, gatk_filtersamreads__spliced__rna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx
        include_reads   = True

[samtools_index__gatk_filtersamreads__splicedexoniccaptured__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__splicedexoniccaptured__rna

    final_output    = bam_idx

[utils_getreadnames__splicedexonic__rna]
    module          = Utils
    submodule       = GetReadNames
    docker_image    = bedsam

    input_from      = gatk_filtersamreads__spliced__rna

    final_output    = read_names

    [[args]]
        bed         = abcgcbscore_exonic_bed

[gatk_filtersamreads__splicedexonic__rna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__splicedexonic__rna, gatk_filtersamreads__spliced__rna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx
        include_reads   = True

[samtools_index__gatk_filtersamreads__splicedexonic__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__splicedexonic__rna

    final_output    = bam_idx

[utils_getreadnames__originalexoniccaptured__rna]
    module          = Utils
    submodule       = GetReadNames
    docker_image    = bedsam

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    final_output    = read_names

    [[args]]
        bed         = abcgcbscore_target_exonic_bed

[gatk_filtersamreads__originalexoniccaptured__rna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__originalexoniccaptured__rna, picard_markduplicates__rna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx
        include_reads   = True

[samtools_index__gatk_filtersamreads__originalexoniccaptured__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__originalexoniccaptured__rna

    final_output    = bam_idx

[utils_getreadnames__originalexonic__rna]
    module          = Utils
    submodule       = GetReadNames
    docker_image    = bedsam

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    final_output    = read_names

    [[args]]
        bed         = abcgcbscore_exonic_bed

[gatk_filtersamreads__originalexonic__rna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__originalexonic__rna, picard_markduplicates__rna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx
        include_reads   = True

[samtools_index__gatk_filtersamreads__originalexonic__rna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__originalexonic__rna

    final_output    = bam_idx

[bedtools_coverage__original__rna]
    module          = Bedtools
    submodule       = Coverage
    docker_image    = bedsam

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    final_output    = read_counts

    [[args]]
        count_reads = True
        bed         = abcgcbscore_target_gene_bed
        ref_idx     = primary_ref_idx

[abcgcbscore__original__rna]
    module          = ABCGCBScore
    docker_image    = abc_gcb_score

    input_from      = bedtools_coverage__original__rna

    final_output    = abc_gcb_score, normalized_gene_counts

    [[args]]
        ref         = abc_gcb_genes
        sample_type = original

[bedtools_coverage__originalexonicoverlap__rna]
    module          = Bedtools
    submodule       = Coverage
    docker_image    = bedsam

    input_from      = gatk_filtersamreads__originalexonic__rna, samtools_index__gatk_filtersamreads__originalexonic__rna

    final_output    = read_counts

    [[args]]
        count_reads = True
        bed         = abcgcbscore_target_gene_bed
        ref_idx     = primary_ref_idx

[abcgcbscore__originalexonicoverlap__rna]
    module          = ABCGCBScore
    docker_image    = abc_gcb_score

    input_from      = bedtools_coverage__originalexonicoverlap__rna

    final_output    = abc_gcb_score, normalized_gene_counts

    [[args]]
        ref         = abc_gcb_genes
        sample_type = exonicoverlap

[bedtools_coverage__originalcapturedexonicoverlap__rna]
    module          = Bedtools
    submodule       = Coverage
    docker_image    = bedsam

    input_from      = gatk_filtersamreads__originalexoniccaptured__rna,samtools_index__gatk_filtersamreads__originalexoniccaptured__rna

    final_output    = read_counts

    [[args]]
        count_reads = True
        bed         = abcgcbscore_target_gene_bed
        ref_idx     = primary_ref_idx

[abcgcbscore__originalcapturedexonicoverlap__rna]
    module          = ABCGCBScore
    docker_image    = abc_gcb_score

    input_from      = bedtools_coverage__originalcapturedexonicoverlap__rna

    final_output    = abc_gcb_score, normalized_gene_counts

    [[args]]
        ref         = abc_gcb_genes
        sample_type = capturedexonicoverlap

[bedtools_coverage__spliced__rna]
    module          = Bedtools
    submodule       = Coverage
    docker_image    = bedsam

    input_from      = gatk_filtersamreads__spliced__rna, samtools_index__gatk_filtersamreads__spliced__rna

    final_output    = read_counts

    [[args]]
        count_reads = True
        bed         = abcgcbscore_target_gene_bed
        ref_idx     = primary_ref_idx

[abcgcbscore__spliced__rna]
    module          = ABCGCBScore
    docker_image    = abc_gcb_score

    input_from      = bedtools_coverage__spliced__rna

    final_output    = abc_gcb_score, normalized_gene_counts

    [[args]]
        ref         = abc_gcb_genes
        sample_type = spliced

[bedtools_coverage__splicedexonicoverlap__rna]
    module          = Bedtools
    submodule       = Coverage
    docker_image    = bedsam

    input_from      = gatk_filtersamreads__splicedexonic__rna,samtools_index__gatk_filtersamreads__splicedexonic__rna

    final_output    = read_counts

    [[args]]
        count_reads = True
        bed         = abcgcbscore_target_gene_bed
        ref_idx     = primary_ref_idx

[abcgcbscore__splicedexonicoverlap__rna]
    module          = ABCGCBScore
    docker_image    = abc_gcb_score

    input_from      = bedtools_coverage__splicedexonicoverlap__rna

    final_output    = abc_gcb_score, normalized_gene_counts

    [[args]]
        ref         = abc_gcb_genes
        sample_type = spliced_exonicoverlap

[bedtools_coverage__splicedcapturedexonicoverlap__rna]
    module          = Bedtools
    submodule       = Coverage
    docker_image    = bedsam

    input_from      = gatk_filtersamreads__splicedexoniccaptured__rna, samtools_index__gatk_filtersamreads__splicedexoniccaptured__rna

    final_output    = read_counts

    [[args]]
        count_reads = True
        bed         = abcgcbscore_target_gene_bed
        ref_idx     = primary_ref_idx

[abcgcbscore__splicedcapturedexonicoverlap__rna]
    module          = ABCGCBScore
    docker_image    = abc_gcb_score

    input_from      = bedtools_coverage__splicedcapturedexonicoverlap__rna

    final_output    = abc_gcb_score, normalized_gene_counts

    [[args]]
        ref         = abc_gcb_genes
        sample_type = spliced_capturedexonicoverlap

[mergernaseq_aggregaterawreadcounts__rna]
    module          = MergeRNAseq
    submodule       = AggregateRawReadCounts
    docker_image    = aggregate_raw_read_counts

    input_from      = star__rna, utils_consolidatesamplename__tna

[mergernaseq_aggregatersemresults__rna]
    module          = MergeRNAseq
    submodule       = AggregateRSEMResults
    docker_image    = aggregate_rsem_results

    input_from      = rsem__rna, utils_consolidatesamplename__tna
#
#[utils_combineexpressionwithmetadata__rawcounts__rna]
#    module          = Utils
#    submodule       = CombineExpressionWithMetadata
#    docker_image    = combine_exp_gene_name
#
#    input_from      = mergernaseq_aggregaterawreadcounts__rna
#    final_output    = annotated_expression_file
#        [[args]]
#            result_type = "rawcounts"
#
#[utils_combineexpressionwithmetadata__rsem__rna]
#    module          = Utils
#    submodule       = CombineExpressionWithMetadata
#    docker_image    = combine_exp_gene_name
#
#    input_from      = mergernaseq_aggregatersemresults__rna
#
#    final_output    = annotated_expression_file
#        [[args]]
#            result_type = "rsem"

###### RNA Section QC
[samtools_flagstat__bowtie2__rna]
    module          = Samtools
    submodule       = Flagstat
    docker_image    = samtools

    input_from      = bowtie2__rna, samtools_index__bowtie2__rna

    final_output    = flagstat

[samtools_flagstat__rna]
    module          = Samtools
    submodule       = Flagstat
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    final_output    = flagstat

[picard_collectinsertsizematrics__rna]
    module          = Picard
    submodule       = CollectInsertSizeMetrics
    docker_image    = picard

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    final_output    = insert_size_report, insert_size_histogram

[samtools_view__countreads__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__countreads__bowtie2__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = bowtie2__rna, samtools_index__bowtie2__rna

    [[args]]
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__exonoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = exonic_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__intronoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = intron_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__intergenicoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = intergenic_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__utroverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = utr_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__mirnaoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = mirna_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__rrnaoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = rrna_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__lincrnaoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = lincrna_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__ontargetoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = target_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__erccoverlap__rna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna

    [[args]]
        bed             = ercc_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[gatk_depthofcoverage__ontargetcoverage__rna]
    module       = GATK
    submodule    = DepthOfCoverage
    docker_image = gatk3
    input_from   = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna, gatk_bedtointervallist__primary__ontarget__tna

    final_output = interval_summary, interval_statistics, sample_summary, sample_statistics, cumulative_coverage_counts, cumulative_coverage_proportions

    [[args]]
        gatk_version = 3
        ref          = primary_ref
        ref_dict     = primary_ref_dict
        ref_idx      = primary_ref_idx
        nr_cpus      = 16
        mem          = 64

[gatk_depthofcoverage__ontargetexoncoverage__rna]
    module       = GATK
    submodule    = DepthOfCoverage
    docker_image = gatk3
    input_from   = picard_markduplicates__rna, samtools_index__picard_markduplicates__rna, gatk_bedtointervallist__primary__ontargetexome__tna

    final_output = interval_summary, interval_statistics, sample_summary, sample_statistics, cumulative_coverage_counts, cumulative_coverage_proportions

    [[args]]
        gatk_version = 3
        ref          = primary_ref
        ref_dict     = primary_ref_dict
        ref_idx      = primary_ref_idx
        nr_cpus      = 16
        mem          = 64

###### RNA Section QCParser
[qcparser_demuxtnastats__tna]
    module          = QCParser
    submodule       = DemuxTNAStats
    docker_image    = qcparser

    input_from      = demuxtna__tna, utils_consolidatesamplename__tna

[qcparser_fastqc__rawfastqc__rna]
    module          = QCParser
    submodule       = FastQC
    docker_image    = qcparser

    input_from      = fastqc__raw__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna fastqc report parsing for raw fastqs"

[qcparser_fastqc__trimfastqc__rna]
    module          = QCParser
    submodule       = FastQC
    docker_image    = qcparser

    input_from      = fastqc__trim__rna, utils_consolidatesamplename__tna

    [[args]]
    note = "rna fastqc report parsing for trimmed fastqs"

[qcparser_fastqc__bowtie2fastqc__rna]
    module          = QCParser
    submodule       = FastQC
    docker_image    = qcparser

    input_from      = fastqc__bowtie2__rna, utils_consolidatesamplename__tna

  [[args]]
    note = "rna bowtie2 fastqc report parsing"

[qcparser_trimmomatic__rna]
    module          = QCParser
    submodule       = Trimmomatic
    docker_image    = qcparser

    input_from      = trimmomatic__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna trimmomatic summary report parsing"

[qcparser_samtoolsflagstat__bowtie2__rna]
    module          = QCParser
    submodule       = SamtoolsFlagstat
    docker_image    = qcparser

    input_from      = samtools_flagstat__bowtie2__rna

    [[args]]
        note = "rna bowtie2 alignment summary report parsing"

[qcparser_samtoolsflagstat__rna]
    module          = QCParser
    submodule       = SamtoolsFlagstat
    docker_image    = qcparser

    input_from      = samtools_flagstat__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna star alignment summary report parsing"

[qcparser_picardinsertsizematrics__rna]
    module          = QCParser
    submodule       = PicardInsertMetrics
    docker_image    = qcparser

    input_from      = picard_collectinsertsizematrics__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna picard insert size summary report parsing"

[qcparser_samtoolscountreads__bowtie2__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__countreads__bowtie2__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna read counts mapped to the rrna reference"

[qcparser_samtoolscountreads__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__countreads__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna read counts mapped to the genome"

[qcparser_samtoolscountreads__ontarget__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__ontargetoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna on target read counts mapped to the genome"

[qcparser_samtoolscountreads__exon__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__exonoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna exon read counts mapped to the genome"

[qcparser_samtoolscountreads__intron__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__intronoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna intron read counts mapped to the genome"

[qcparser_samtoolscountreads__intergenic__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__intergenicoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna intergenic read counts mapped to the genome"

[qcparser_samtoolscountreads__utr__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__utroverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna utr read counts mapped to the genome"

[qcparser_samtoolscountreads__mirna__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__mirnaoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna miRNA read counts mapped to the genome"

[qcparser_samtoolscountreads__rrna__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__rrnaoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna rRNA read counts mapped to the genome"

[qcparser_samtoolscountreads__lincrna__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__lincrnaoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna lincRNA read counts mapped to the genome"

[qcparser_samtoolscountreads__ercc__rna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__erccoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna ERCC read counts mapped to the genome"

[qcparser_docsamplesummarystats__rna]
    module          = QCParser
    submodule       = DOCSampleSummaryStats
    docker_image    = qcparser

    input_from      = gatk_depthofcoverage__ontargetcoverage__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna on target depth of coverage stats"

[qcparser_docintervalsummarystats__rna]
    module          = QCParser
    submodule       = DOCIntervalSummaryStats
    docker_image    = qcparser

    input_from      = gatk_depthofcoverage__ontargetexoncoverage__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna on target exon depth of coverage stats"
#
#[qcparser_docsampleintervalsummary__rna]
#    module          = QCParser
#    submodule       = DOCSampleIntervalSummary
#    docker_image    = qcparser
#
#    input_from      = gatk_depthofcoverage__ontargetcoverage__rna, utils_consolidatesamplename__tna
#
#    [[args]]
#        note = "rna ERCC coverage stats"

[qcparser_abcgcbscore__original__rna]
    module          = QCParser
    submodule       = ABCGCBScore
    docker_image    = qcparser

    input_from      = abcgcbscore__original__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna original abc/gcb score"

[qcparser_abcgcbscore__originalexonicoverlap__rna]
    module          = QCParser
    submodule       = ABCGCBScore
    docker_image    = qcparser

    input_from      = abcgcbscore__originalexonicoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna exonic overlap abc/gcb score"

[qcparser_abcgcbscore__originalcapturedexonicoverlap__rna]
    module          = QCParser
    submodule       = ABCGCBScore
    docker_image    = qcparser

    input_from      = abcgcbscore__originalcapturedexonicoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna captured exonic overlap abc/gcb score"

[qcparser_abcgcbscore__spliced__rna]
    module          = QCParser
    submodule       = ABCGCBScore
    docker_image    = qcparser

    input_from      = abcgcbscore__spliced__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna spliced abc/gcb score"

[qcparser_abcgcbscore__splicedcapturedexonicoverlap__rna]
    module          = QCParser
    submodule       = ABCGCBScore
    docker_image    = qcparser

    input_from      = abcgcbscore__splicedcapturedexonicoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna spliced captured exonic overlap abc/gcb score"

[qcparser_abcgcbscore__splicedexonicoverlap__rna]
    module          = QCParser
    submodule       = ABCGCBScore
    docker_image    = qcparser

    input_from      = abcgcbscore__splicedexonicoverlap__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna spliced exonic overlap abc/gcb score"

[qcparser_stargenereadcounts__rna]
    module          = QCParser
    submodule       = StarGeneReadCounts
    docker_image    = qcparser

    input_from      = star__rna, utils_consolidatesamplename__tna

    [[args]]
        note = "rna star gene read counts for ERCC"

[qcreportmerger_cbind__rna]
    module          = QCReportMerger
    submodule       = Cbind
    docker_image    = qcparser

    input_from      = qcparser_demuxtnastats__tna, qcparser_fastqc__rawfastqc__rna, qcparser_fastqc__trimfastqc__rna,qcparser_fastqc__bowtie2fastqc__rna,  qcparser_trimmomatic__rna, qcparser_samtoolsflagstat__bowtie2__rna, qcparser_samtoolsflagstat__rna, qcparser_picardinsertsizematrics__rna, qcparser_samtoolscountreads__exon__rna, qcparser_samtoolscountreads__intron__rna, qcparser_samtoolscountreads__intergenic__rna, qcparser_samtoolscountreads__utr__rna, qcparser_samtoolscountreads__mirna__rna, qcparser_samtoolscountreads__rrna__rna, qcparser_samtoolscountreads__lincrna__rna, qcparser_docsamplesummarystats__rna, qcparser_docintervalsummarystats__rna, qcparser_samtoolscountreads__rna, qcparser_samtoolscountreads__ontarget__rna, qcparser_samtoolscountreads__ercc__rna, qcparser_samtoolscountreads__bowtie2__rna,qcparser_abcgcbscore__original__rna, qcparser_abcgcbscore__originalexonicoverlap__rna,qcparser_abcgcbscore__originalcapturedexonicoverlap__rna, qcparser_abcgcbscore__spliced__rna, qcparser_abcgcbscore__splicedcapturedexonicoverlap__rna,qcparser_abcgcbscore__splicedexonicoverlap__rna, qcparser_stargenereadcounts__rna
#    input_from      = qcparser_demuxtnastats__tna, qcparser_fastqc__rawfastqc__rna, qcparser_fastqc__trimfastqc__rna, qcparser_trimmomatic__rna, qcparser_samtoolsflagstat__rna, qcparser_picardinsertsizematrics__rna, qcparser_samtoolscountreads__exon__rna, qcparser_samtoolscountreads__intron__rna, qcparser_samtoolscountreads__intergenic__rna, qcparser_samtoolscountreads__utr__rna, qcparser_samtoolscountreads__mirna__rna, qcparser_samtoolscountreads__rrna__rna, qcparser_samtoolscountreads__lincrna__rna, qcparser_samtoolscountreads__rna

################## EXOME GRAPH
[utils_getdemuxfastq__dnafastqs__tna]
    module          = Utils
    submodule       = GetDemuxFASTQ

    input_from      = demuxtna__tna

    final_output    = R1, R2

    [[args]]
        keep_assay_type = DNA

[fastqc__raw__dna]
    module          = FastQC
    docker_image    = fastqc

    input_from      = utils_getdemuxfastq__dnafastqs__tna

    final_output    = R1_fastqc, R2_fastqc

        [[args]]
            mem     = 12

[trimmomatic__dna]
    module          = Trimmomatic
    docker_image    = trimmomatic

    input_from      = utils_getdemuxfastq__dnafastqs__tna

    final_output    = trim_report

    [[args]]
        MINLEN  = 25

[fastqc__trim__dna]
    module          = FastQC
    docker_image    = fastqc

    input_from      = trimmomatic__dna

    final_output    = R1_fastqc, R2_fastqc

        [[args]]
            mem     = 12

[utils_getreadgroup__dna]
    module = Utils
    submodule = GetReadGroup

    input_from = trimmomatic__dna, utils_consolidatesamplename__tna

[bowtie2__dna]
    module          = Bowtie2
    docker_image    = bowtie2

    input_from      = trimmomatic__dna

    final_output    = bam, R1, R2

    [[args]]
        ref     = rrna_ref

[fastqc__bowtie2__dna]
    module          = FastQC
    docker_image    = fastqc

    input_from      = bowtie2__dna

    final_output    = R1_fastqc, R2_fastqc

        [[args]]
            mem     = 12

[samtools_index__bowtie2__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = bowtie2__dna

    final_output    = bam_idx

[star__dna]
    module          = Star
    docker_image    = star

    input_from      = bowtie2__dna, utils_getreadgroup__dna

#    final_output    = bam, transcriptome_mapped_bam, raw_read_counts, final_log

    [[args]]
        ref         = star_ref

[samtools_index__star__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = star__dna

#    final_output    = bam_idx

[picard_markduplicates__star__dna]
    module          = Picard
    submodule       = MarkDuplicates
    docker_image    = picard

    input_from      = star__dna, samtools_index__star__dna

#    final_output    = bam

[samtools_index__picard_markduplicates__star__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = picard_markduplicates__star__dna

#    final_output    = bam_idx

[utils_getreadnames__spliced__dna]
    module          = Utils
    submodule       = GetReadNames
    docker_image    = bedsam

    input_from      = picard_markduplicates__star__dna, samtools_index__picard_markduplicates__star__dna

    final_output    = read_names

    [[args]]
        spliced_reads = True

[bwaaligner__dna]
    module = BwaAligner
    docker_image = bwa

    input_from = bowtie2__dna, utils_getreadgroup__dna

    [[args]]
        ref = ref

[samtools_index__bwaaligner__dna]
    module = Samtools
    submodule = Index
    docker_image = samtools

    input_from = bwaaligner__dna

[picard_markduplicates__bwaaligner__dna]
    module = Picard
    submodule = MarkDuplicates
    docker_image = picard

    input_from = bwaaligner__dna, samtools_index__bwaaligner__dna

#    final_output = bam

[samtools_index__picard_markduplicates__bwaaligner__dna]
    module = Samtools
    submodule = Index
    docker_image = samtools

    input_from = picard_markduplicates__bwaaligner__dna

#    final_output = bam_idx

[gatk_filtersamreads__spliced__dna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__spliced__dna, picard_markduplicates__bwaaligner__dna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx
        include_reads   = True

[samtools_index__gatk_filtersamreads__spliced__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__spliced__dna

    final_output    = bam_idx

[gatk_filtersamreads__nonspliced__dna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__spliced__dna, picard_markduplicates__bwaaligner__dna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx
        exclude_reads   = True

[samtools_index__gatk_filtersamreads__nonspliced__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna

    final_output    = bam_idx

[gatk_collectgcbiasmetrics__dna]
    module          = GATK
    submodule       = CollectGcBiasMetrics
    docker_image    = gatk4

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    final_output    = gc_bias_matrics, gc_bias_plot, summary_matrics

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx

[gatk_collectoxogmetrics__dna]
    module       = GATK
    submodule    = CollectOxoGMetrics
    docker_image = gatk4

    input_from   = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    final_output = oxog_bias_matrics

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx

[gatk_collectsequencingartifactmetrics__dna]
    module       = GATK
    submodule    = CollectSequencingArtifactMetrics
    docker_image = gatk4

    input_from   = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    final_output = pre_adapter_detail_metrics,pre_adapter_summary_metrics,bait_bias_detail_metrics, bait_bias_summary_metrics, error_summary_metrics

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx

[utils_coverttosam__dna]
    module          = Utils
    submodule       = CovertToSAM
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

#    final_output    = sam

    [[args]]
        bed             = ercc_bed
        exclude_flag    = 2308

[gatk_haplotypecaller__gvcf__dna]
    module          = GATK
    submodule       = HaplotypeCaller
    docker_image    = gatk4

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna, gatk_bedtointervallist__paddedontarget__tna

    final_output    = gvcf_gz, gvcf_idx

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx
        output_type     = gvcf

[gatk_haplotypecaller__vcf__dna]
    module          = GATK
    submodule       = HaplotypeCaller
    docker_image    = gatk4

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna, gatk_bedtointervallist__paddedontarget__tna

    final_output    = vcf_gz, vcf_idx

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx
        output_type     = vcf

[utils_gunzipvcf__haplotypecaller__dna]

    module          = Utils
    submodule       = GunzipVCF
    docker_image    = gunzip

    input_from      = gatk_haplotypecaller__vcf__dna

#    final_output    = vcf

[bcftools_bcftoolsnorm__haplotypecaller__dna]
    module = Bcftools
    submodule = BCFToolsNorm
    docker_image = bcftools

    input_from = utils_gunzipvcf__haplotypecaller__dna

    final_output = vcf

    [[args]]
        ref = ref

[annovar__haplotypecaller__dna]
    module          = Annovar

    input_from      = bcftools_bcftoolsnorm__haplotypecaller__dna

    final_output    = vcf

    [[args]]
        dbdir   = "/ref/annovar/humandb"
        operations = "g,r,f,f,f,f,f,f,f,f,f,f,f,f"
        protocol = "refGene,genomicSuperDups,exac03,gnomad_exome,gnomad_genome,avsnp150,esp6500siv2_all,1000g2015aug_all,cosmic87_coding,cosmic87_noncoding,dbnsfp35a,cadd14gt10,nci60,clinvar_20180603"
        buildver = "hg38"

[utils_recodevcf__haplotypecaller__dna]
    module = Utils
    submodule = RecodeVCF
    docker_image = pipeline_tools

    input_from = annovar__haplotypecaller__dna

    final_output = recoded_vcf

    [[args]]
        nr_cpus = 8
        mem     = 30

[strelka2__dna]
    module          = Strelka2
    submodule       = Strelka2
    docker_image    = strelka2

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna, utils_bgzipbed__tna, utils_indexbed__tna

    final_output    = vcf_gz, vcf_tbi

    [[args]]
        ref = ref

[utils_gunzipvcf__strelka2__dna]

    module          = Utils
    submodule       = GunzipVCF
    docker_image    = gunzip

    input_from      = strelka2__dna

[bcftools_bcftoolsnorm__strelka2__dna]
    module          = Bcftools
    submodule       = BCFToolsNorm
    docker_image    = bcftools

    input_from      = utils_gunzipvcf__strelka2__dna

    final_output    = vcf

    [[args]]
        ref = ref

[annovar__strelka2__dna]
    module          = Annovar

    input_from      = bcftools_bcftoolsnorm__strelka2__dna

    final_output    = vcf

    [[args]]
        dbdir   = "/ref/annovar/humandb"
        operations = "g,r,f,f,f,f,f,f,f,f,f,f,f,f"
        protocol = "refGene,genomicSuperDups,exac03,gnomad_exome,gnomad_genome,avsnp150,esp6500siv2_all,1000g2015aug_all,cosmic87_coding,cosmic87_noncoding,dbnsfp35a,cadd14gt10,nci60,clinvar_20180603"
        buildver = "hg38"

[utils_recodevcf__strelka2__dna]
    module          = Utils
    submodule       = RecodeVCF
    docker_image    = pipeline_tools

    input_from      = annovar__strelka2__dna

    final_output    = recoded_vcf

    [[args]]
        nr_cpus = 8
        mem     = 30

[deepvariant__dna]
    module          = DeepVariant
    submodule       = DeepVariant
    docker_image    = deepvariant

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    final_output    = gvcf_gz, vcf_gz, gvcf_tbi, vcf_tbi

    [[args]]
        bed = padded_target_bed
        ref = ref

[utils_gunzipvcf__deepvariant__dna]

    module          = Utils
    submodule       = GunzipVCF
    docker_image    = gunzip

    input_from      = deepvariant__dna

[bcftools_bcftoolsnorm__deepvariant__dna]
    module          = Bcftools
    submodule       = BCFToolsNorm
    docker_image    = bcftools

    input_from      = utils_gunzipvcf__deepvariant__dna

    final_output    = vcf

    [[args]]
        ref = ref

[annovar__deepvariant__dna]
    module          = Annovar

    input_from      = bcftools_bcftoolsnorm__deepvariant__dna

    final_output    = vcf

    [[args]]
        dbdir   = "/ref/annovar/humandb"
        operations = "g,r,f,f,f,f,f,f,f,f,f,f,f,f"
        protocol = "refGene,genomicSuperDups,exac03,gnomad_exome,gnomad_genome,avsnp150,esp6500siv2_all,1000g2015aug_all,cosmic87_coding,cosmic87_noncoding,dbnsfp35a,cadd14gt10,nci60,clinvar_20180603"
        buildver = "hg38"

[utils_recodevcf__deepvariant__dna]
    module          = Utils
    submodule       = RecodeVCF
    docker_image    = pipeline_tools

    input_from      = annovar__deepvariant__dna

    final_output    = recoded_vcf

    [[args]]
        nr_cpus = 8
        mem     = 30

[jacquard_jacquard__dna]

    module          = Jacquard
    submodule       = Jacquard
    docker_image    = jacquard

    input_from      = utils_gunzipvcf__haplotypecaller__dna, utils_gunzipvcf__strelka2__dna, utils_gunzipvcf__deepvariant__dna

    final_output    = vcf

#
#[variantfilter__dna]
#    module          = VariantFilter
#    docker_image    = variant_filter
#
#    input_from      = utils_recodevcf__dna
#    final_output    = filter_variants_text, filter_variants_json, subset_filter_variants_text

###### DNA Section QC
[samtools_flagstat__bowtie2__dna]
    module          = Samtools
    submodule       = Flagstat
    docker_image    = samtools

    input_from      = bowtie2__dna, samtools_index__bowtie2__dna

    final_output = flagstat

[samtools_flagstat__dna]
    module =  Samtools
    submodule = Flagstat
    docker_image = samtools

    input_from = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    final_output = flagstat

[picard_collectinsertsizematrics__dna]
    module = Picard
    submodule = CollectInsertSizeMetrics
    docker_image = picard

    input_from = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    final_output = insert_size_report, insert_size_histogram

[samtools_view__countreads__bowtie2__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = bowtie2__dna, samtools_index__bowtie2__dna

    [[args]]
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__countreads__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__exonoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = exonic_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__intronoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = intron_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__intergenicoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = intergenic_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__utroverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = utr_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__mirnaoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = mirna_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__rrnaoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = rrna_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__lincrnaoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = lincrna_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__ontargetoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = target_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[samtools_view__erccoverlap__dna]
    module          = Samtools
    submodule       = View
    docker_image    = samtools

    input_from      = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna

    [[args]]
        bed             = ercc_bed
        count_reads     = True
        exclude_flag    = 3332 # exclude unmapped,secondary aligned,pcr dups,suppl alignment

[utils_geterccreadcounts__dna]
    module          = Utils
    submodule       = GetERCCReadCounts

    input_from      = utils_coverttosam__dna

    final_output    = read_counts

[gatk_depthofcoverage__ontargetcoverage__dna]
    module       = GATK
    submodule    = DepthOfCoverage
    docker_image = gatk3

    input_from   = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna, gatk_bedtointervallist__ontarget__tna

    final_output = interval_summary, interval_statistics, sample_summary, sample_statistics, cumulative_coverage_counts, cumulative_coverage_proportions

    [[args]]
        gatk_version = 3
        ref          = ref
        ref_dict     = ref_dict
        ref_idx      = ref_idx
        nr_cpus      = 16
        mem          = 64

[gatk_depthofcoverage__ontargetexoncoverage__dna]
    module       = GATK
    submodule    = DepthOfCoverage
    docker_image = gatk3

    input_from   = gatk_filtersamreads__nonspliced__dna, samtools_index__gatk_filtersamreads__nonspliced__dna, gatk_bedtointervallist__ontargetexome__tna

    final_output = interval_summary, interval_statistics, sample_summary, sample_statistics, cumulative_coverage_counts, cumulative_coverage_proportions

    [[args]]
        gatk_version = 3
        ref          = ref
        ref_dict     = ref_dict
        ref_idx      = ref_idx
        nr_cpus      = 16
        mem          = 64

###### DNA Section QCParser
[qcparser_fastqc__rawfastqc__dna]
    module          = QCParser
    submodule       = FastQC
    docker_image    = qcparser

    input_from      = fastqc__raw__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna fastqc report parsing for raw fastqs"

[qcparser_fastqc__trimfastqc__dna]
    module          = QCParser
    submodule       = FastQC
    docker_image    = qcparser

    input_from      = fastqc__trim__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna fastqc report parsing for trimmed fastqs"

[qcparser_fastqc__bowtie2fastqc__dna]
    module          = QCParser
    submodule       = FastQC
    docker_image    = qcparser

    input_from      = fastqc__bowtie2__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna bowtie2 fastqc report parsing"

[qcparser_trimmomatic__dna]
    module          = QCParser
    submodule       = Trimmomatic
    docker_image    = qcparser

    input_from      = trimmomatic__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna trimmomatic summary report parsing"

[qcparser_samtoolsflagstat__bowtie2__dna]
    module          = QCParser
    submodule       = SamtoolsFlagstat
    docker_image    = qcparser

    input_from      = samtools_flagstat__bowtie2__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna bowtie2 alignment summary report parsing"

[qcparser_samtoolsflagstat__dna]
    module          = QCParser
    submodule       = SamtoolsFlagstat
    docker_image    = qcparser

    input_from      = samtools_flagstat__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna bwa-mem alignment summary report parsing"

[qcparser_picardinsertsizematrics__dna]
    module          = QCParser
    submodule       = PicardInsertMetrics
    docker_image    = qcparser

    input_from      = picard_collectinsertsizematrics__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna picard insert size summary report parsing"

[qcparser_samtoolscountreads__bowtie2__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__countreads__bowtie2__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna read counts mapped to the rrna reference"

[qcparser_samtoolscountreads__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__countreads__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna read counts mapped to the genome"

[qcparser_readnamecounts__splicereads__dna]
    module          = QCParser
    submodule       = ReadNameCounts
    docker_image    = qcparser

    input_from      = utils_getreadnames__spliced__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna splice read counts mapped to the genome"

[qcparser_samtoolscountreads__ontarget__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__ontargetoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna on target read counts mapped to the genome"

[qcparser_samtoolscountreads__exon__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__exonoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna exon read counts mapped to the genome"

[qcparser_samtoolscountreads__intron__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__intronoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna intron read counts mapped to the genome"

[qcparser_samtoolscountreads__intergenic__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__intergenicoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna intergenic read counts mapped to the genome"

[qcparser_samtoolscountreads__utr__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__utroverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna utr read counts mapped to the genome"

[qcparser_samtoolscountreads__mirna__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__mirnaoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna miRNA read counts mapped to the genome"

[qcparser_samtoolscountreads__rrna__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__rrnaoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna rRNA read counts mapped to the genome"

[qcparser_samtoolscountreads__lincrna__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__lincrnaoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna lincRNA read counts mapped to the genome"

[qcparser_samtoolscountreads__ercc__dna]
    module          = QCParser
    submodule       = SamtoolsCountReads
    docker_image    = qcparser

    input_from      = samtools_view__erccoverlap__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna ERCC read counts mapped to the genome"

[qcparser_erccreadcounts__dna]
    module          = QCParser
    submodule       = ERCCReadCounts
    docker_image    = qcparser

    input_from      = utils_geterccreadcounts__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna ERCC read counts per bait"

[qcparser_docsamplesummarystats__dna]
    module          = QCParser
    submodule       = DOCSampleSummaryStats
    docker_image    = qcparser

    input_from      = gatk_depthofcoverage__ontargetcoverage__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna on target depth of coverage stats"

[qcparser_docintervalsummarystats__dna]
    module          = QCParser
    submodule       = DOCIntervalSummaryStats
    docker_image    = qcparser

    input_from      = gatk_depthofcoverage__ontargetexoncoverage__dna, utils_consolidatesamplename__tna

    [[args]]
        note = "dna on target exon depth of coverage stats"
#
#[qcparser_docsampleintervalsummary__dna]
#    module          = QCParser
#    submodule       = DOCSampleIntervalSummary
#    docker_image    = qcparser
#
#    input_from      = gatk_depthofcoverage__ontargetcoverage__dna, utils_consolidatesamplename__tna
#
#    [[args]]
#        note = "dna ERCC coverage stats"

[qcreportmerger_cbind__dna]
    module          = QCReportMerger
    submodule       = Cbind
    docker_image    = qcparser

    input_from      = qcparser_demuxtnastats__tna, qcparser_fastqc__rawfastqc__dna, qcparser_fastqc__trimfastqc__dna,qcparser_fastqc__bowtie2fastqc__dna, qcparser_trimmomatic__dna, qcparser_samtoolsflagstat__bowtie2__dna, qcparser_samtoolsflagstat__dna, qcparser_picardinsertsizematrics__dna, qcparser_samtoolscountreads__exon__dna, qcparser_samtoolscountreads__intron__dna, qcparser_samtoolscountreads__intergenic__dna, qcparser_samtoolscountreads__utr__dna, qcparser_samtoolscountreads__mirna__dna, qcparser_samtoolscountreads__rrna__dna, qcparser_samtoolscountreads__lincrna__dna, qcparser_docsamplesummarystats__dna, qcparser_docintervalsummarystats__dna, qcparser_samtoolscountreads__dna, qcparser_samtoolscountreads__ontarget__dna, qcparser_samtoolscountreads__ercc__dna, qcparser_samtoolscountreads__bowtie2__dna, qcparser_erccreadcounts__dna, qcparser_readnamecounts__splicereads__dna
#    input_from      = qcparser_demuxtnastats__tna, qcparser_fastqc__rawfastqc__dna, qcparser_fastqc__trimfastqc__dna, qcparser_trimmomatic__dna, qcparser_samtoolsflagstat__dna, qcparser_picardinsertsizematrics__dna, qcparser_samtoolscountreads__exon__dna, qcparser_samtoolscountreads__intron__dna, qcparser_samtoolscountreads__intergenic__dna, qcparser_samtoolscountreads__utr__dna, qcparser_samtoolscountreads__mirna__dna, qcparser_samtoolscountreads__rrna__dna, qcparser_samtoolscountreads__lincrna__dna, qcparser_samtoolscountreads__dna

################## Final QC Merge TNA (DNA + RNA)
[qcreportmerger_cbind__tna]
    module = QCReportMerger
    submodule = Cbind
    docker_image = qcparser

    input_from = qcreportmerger_cbind__rna, qcreportmerger_cbind__dna

    final_output = qc_report

###### DNA Section CNV
#[gatk_collectreadcounts__dna]
#    module       = GATK
#    submodule    = CollectReadCounts
#    docker_image = gatk4
#
#    input_from   = picard_markduplicates__dna, samtools_index__picard_markduplicates__dna
#
#    final_output = read_count_out
#
#    [[args]]
#        gatk_version = 4
#        ref          = ref
#        ref_dict     = ref_dict
#        ref_idx      = ref_idx
#
#[gatk_denoisereadcounts__dna]
#    module       = GATK
#    submodule    = DenoiseReadCounts
#    docker_image = gatk4
#
#    input_from   = gatk_collectreadcounts__dna
#
#    final_output = std_copy_ratio, denoise_copy_ratio
#
#    [[args]]
#        gatk_version = 4
#        ref          = ref
#        ref_dict     = ref_dict
#        ref_idx      = ref_idx
#
#[gatk_plotdenoisedcopyratios__dna]
#    module       = GATK
#    submodule    = PlotDenoisedCopyRatios
#    docker_image = gatk4
#
#    input_from   = gatk_denoisereadcounts__dna
#
#    final_output = denoised_plot, denoised_plot_lm4, std_mad, denoised_mad, delta_mad, scale_delta_mad
#
#    [[args]]
#        gatk_version = 4
#        ref          = ref
#        ref_dict     = ref_dict
#        ref_idx      = ref_idx
#
#[gatk_modelsegments__dna]
#    module       = GATK
#    submodule    = ModelSegments
#    docker_image = gatk4
#
#    input_from   = gatk_denoisereadcounts__dna
#
#    final_output = model_begin_seg, model_final_seg, cr_seg, model_begin_af_param, model_begin_cr_param, model_final_af_param, model_final_cr_param
#
#    [[args]]
#        gatk_version = 4
#        ref          = ref
#        ref_dict     = ref_dict
#        ref_idx      = ref_idx
#
#[gatk_callcopyratiosegments__dna]
#    module       = GATK
#    submodule    = CallCopyRatioSegments
#    docker_image = gatk4
#
#    input_from   = gatk_modelsegments__dna
#
#    final_output = seg_call
#
#    [[args]]
#        gatk_version = 4
#        ref          = ref
#        ref_dict     = ref_dict
#        ref_idx      = ref_idx
#
#[gatk_plotmodeledsegments__dna]
#    module       = GATK
#    submodule    = PlotModeledSegments
#    docker_image = gatk4
#
#    input_from   = gatk_denoisereadcounts__dna, gatk_modelsegments__dna, gatk_callcopyratiosegments__dna
#
#    final_output = model_plot
#
#    [[args]]
#        gatk_version = 4
#        ref          = ref
#        ref_dict     = ref_dict
#        ref_idx      = ref_idx

### Translocation
#[discordantreadspileup__dna]
#    module       = DiscordantReadsPileup
#    docker_image = discordant_reads_pileup
#
#    input_from   = picard_markduplicates__dna, samtools_index__picard_markduplicates__dna, utils_consolidatesamplename__tna
#
#    final_output = raw_translocation_table, annotated_translocation_table
#
#    [[args]]
#        filter_bed      = translocation_filter_bed
#        gene_bed        = gene_bed
#        promoter_bed    = promoter_bed
#        bed             = target_bed
#        literature_bed  = literature_bed
### Multi-Omics-Analysis
[MultiOmicsResults__haplotypecaller__altaware__tna]
    module          = MultiOmicsResults
    docker_image    = multi_omics_results

#    input_from      = utils_combineexpressionwithmetadata__rawcounts__rna, utils_recodevcf__dna
    input_from      = utils_recodevcf__haplotypecaller__dna

#    final_output    = filter_variants_text, filter_variants_json, subset_filter_variants_text, all_variants , expr_subset, coo_genes, expr_subset_coo, coo_classification, myc_bcl2_expr, input_features, input_combos, dist_hist_similar_patients, survival_similar_risk

    final_output    = filter_variants_text, all_variants
#
#    [[args]]
#        ref_expr        = 1KDLBCL_target_expression_ref
#        ref_cell_model  = genetic_model_ref
#        run_flag        = 0

### Multi-Omics-Analysis
#[MultiOmicsResults__strelka2__tna]
#    module          = MultiOmicsResults
#    docker_image    = multi_omics_results
#
##    input_from      = utils_combineexpressionwithmetadata__rawcounts__rna, utils_recodevcf__dna
#    input_from      = utils_recodevcf__strelka2__dna
#
##    final_output    = filter_variants_text, filter_variants_json, subset_filter_variants_text, all_variants , expr_subset, coo_genes, expr_subset_coo, coo_classification, myc_bcl2_expr, input_features, input_combos, dist_hist_similar_patients, survival_similar_risk
#
#    final_output    = filter_variants_text, all_variants
#
#    [[args]]
#        ref_expr        = 1KDLBCL_target_expression_ref
#        ref_cell_model  = genetic_model_ref
#        run_flag        = 0

### Multi-Omics-Analysis
#[MultiOmicsResults__deepvariant__tna]
#    module          = MultiOmicsResults
#    docker_image    = multi_omics_results
#
##    input_from      = utils_combineexpressionwithmetadata__rawcounts__rna, utils_recodevcf__dna
#    input_from      = utils_recodevcf__deepvariant__dna
#
##    final_output    = filter_variants_text, filter_variants_json, subset_filter_variants_text, all_variants , expr_subset, coo_genes, expr_subset_coo, coo_classification, myc_bcl2_expr, input_features, input_combos, dist_hist_similar_patients, survival_similar_risk
#
#    final_output    = filter_variants_text, all_variants
#
#    [[args]]
#        ref_expr        = 1KDLBCL_target_expression_ref
#        ref_cell_model  = genetic_model_ref
#        run_flag        = 0
