[utils_consolidatesamplename__dna]
    module      = Utils
    submodule   = ConsolidateSampleName

[gatk_bedtointervallist__ontarget__dna]
    module       = GATK
    submodule    = BedToIntervalList
    docker_image = gatk4

    final_output = interval_list

    [[args]]
        bed             = target_bed
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx


[gatk_bedtointervallist__primary__ontarget__dna]
    module       = GATK
    submodule    = BedToIntervalList
    docker_image = gatk4

    final_output = interval_list

    [[args]]
        bed             = primary_target_bed
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx
#
#[gatk_bedtointervallist__ontargetexome__dna]
#    module       = GATK
#    submodule    = BedToIntervalList
#    docker_image = gatk4
#
#    [[args]]
#        gatk_version    = 4
#        bed             = target_exonic_bed
#        ref             = ref

################## EXOME GRAPH
[fastp__dna]
    module          = Fastp
    docker_image    = fastp

#    input_from      = utils_getdemuxfastq__dnafastqs__tna

    final_output    = R1, R2, unpaired_r1, unpaired_r2, failed_reads, trim_report, html_report, json_report

    [[args]]
        min_read_length = 25

[utils_getreadgroup__dna]
    module = Utils
    submodule = GetReadGroup

    input_from = fastp__dna, utils_consolidatesamplename__dna

[bowtie2__dna]
    module          = Bowtie2
    docker_image    = bowtie2

    input_from      = fastp__dna

    final_output    = bam, R1, R2

    [[args]]
        ref     = rrna_ref

[samtools_index__bowtie2__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = bowtie2__dna

    final_output    = bam_idx

[star__dna]
    module          = Star
    docker_image    = star

    input_from      = bowtie2__dna, utils_getreadgroup__dna

    final_output    = bam, transcriptome_mapped_bam, raw_read_counts, final_log

    [[args]]
        ref         = star_ref

[samtools_index__star__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = star__dna

    final_output    = bam_idx

[picard_markduplicates__star__dna]
    module          = Picard
    submodule       = MarkDuplicates
    docker_image    = picard

    input_from      = star__dna, samtools_index__star__dna

    final_output    = bam

[samtools_index__picard_markduplicates__star__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = picard_markduplicates__star__dna

    final_output    = bam_idx

[utils_getreadnames__spliced__dna]
    module          = Utils
    submodule       = GetReadNames
    docker_image    = bedsam

    input_from      = picard_markduplicates__star__dna, samtools_index__picard_markduplicates__star__dna

    final_output    = read_names

    [[args]]
        spliced_reads = True

[bwaaligner__primary__dna]
    module = BwaAligner
    docker_image = bwa

    input_from = bowtie2__dna, utils_getreadgroup__dna

    [[args]]
        ref = primary_ref

[samtools_index__bwaaligner__primary__dna]
    module = Samtools
    submodule = Index
    docker_image = samtools

    input_from = bwaaligner__primary__dna

[picard_markduplicates__bwa__primary__dna]
    module = Picard
    submodule = MarkDuplicates
    docker_image = picard

    input_from = bwaaligner__primary__dna, samtools_index__bwaaligner__primary__dna

    final_output = bam

[samtools_index__picard_markduplicates__bwa__primary__dna]
    module = Samtools
    submodule = Index
    docker_image = samtools

    input_from = picard_markduplicates__bwa__primary__dna

    final_output = bam_idx

[bwaaligner__altaware__dna]
    module = BwaAligner
    docker_image = bwa

    input_from = bowtie2__dna, utils_getreadgroup__dna

    [[args]]
        ref = ref

[samtools_index__bwaaligner__altaware__dna]
    module = Samtools
    submodule = Index
    docker_image = samtools

    input_from = bwaaligner__altaware__dna

[picard_markduplicates__bwa__altaware__dna]
    module = Picard
    submodule = MarkDuplicates
    docker_image = picard

    input_from = bwaaligner__altaware__dna, samtools_index__bwaaligner__altaware__dna

    final_output = bam

[samtools_index__picard_markduplicates__bwa__altaware__dna]
    module = Samtools
    submodule = Index
    docker_image = samtools

    input_from = picard_markduplicates__bwa__altaware__dna

    final_output = bam_idx

[gatk_filtersamreads__spliced__primary__dna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__spliced__dna, picard_markduplicates__bwa__primary__dna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = primary_ref
        ref_dict        = primary_ref_dict
        ref_idx         = primary_ref_idx
        exclude_reads   = True

[samtools_index__gatk_filtersamreads__spliced__primary__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__spliced__primary__dna

    final_output    = bam_idx

[gatk_collectoxogmetrics__primary__dna]
    module       = GATK
    submodule    = CollectOxoGMetrics
    docker_image = gatk4

    input_from   = gatk_filtersamreads__spliced__primary__dna, samtools_index__gatk_filtersamreads__spliced__primary__dna

    final_output = oxog_bias_matrics

    [[args]]
        gatk_version = 4
        ref          = primary_ref
        ref_dict     = primary_ref_dict
        ref_idx      = primary_ref_idx

[gatk_collectsequencingartifactmetrics__primary__dna]
    module       = GATK
    submodule    = CollectSequencingArtifactMetrics
    docker_image = gatk4

    input_from   = gatk_filtersamreads__spliced__primary__dna, samtools_index__gatk_filtersamreads__spliced__primary__dna

    final_output = pre_adapter_detail_metrics,pre_adapter_summary_metrics,bait_bias_detail_metrics, bait_bias_summary_metrics, error_summary_metrics

    [[args]]
        gatk_version = 4
        ref          = primary_ref
        ref_dict     = primary_ref_dict
        ref_idx      = primary_ref_idx

[gatk_haplotypecaller__vcf__primary__dna]
    module = GATK
    submodule = HaplotypeCaller
    docker_image = gatk4

    input_from = gatk_filtersamreads__spliced__primary__dna, samtools_index__gatk_filtersamreads__spliced__primary__dna, gatk_bedtointervallist__primary__ontarget__dna

    final_output = vcf_gz, vcf_idx

    [[args]]
        gatk_version = 4
        ref = primary_ref
        ref_dict = primary_ref_dict
        ref_idx = primary_ref_idx
        output_type = vcf

[utils_gunzipvcf__primary__dna]

    module          = Utils
    submodule       = GunzipVCF
    docker_image    = gunzip

    input_from      = gatk_haplotypecaller__vcf__primary__dna

    final_output    = vcf

[bcftools_bcftoolsnorm__primary__dna]
    module = Bcftools
    submodule = BCFToolsNorm
    docker_image = bcftools

    input_from = utils_gunzipvcf__primary__dna

    final_output = vcf

    [[args]]
        ref = primary_ref

[annovar__primary__dna]
    module          = Annovar

    input_from      = bcftools_bcftoolsnorm__primary__dna

    final_output    = vcf

    [[args]]
        dbdir   = "/ref/annovar/humandb"
        operations = "g,r,f,f,f,f,f,f,f,f,f,f,f,f"
        protocol = "refGene,genomicSuperDups,exac03,gnomad_exome,gnomad_genome,avsnp150,esp6500siv2_all,1000g2015aug_all,cosmic87_coding,cosmic87_noncoding,dbnsfp35a,cadd14gt10,nci60,clinvar_20180603"
        buildver = "hg38"

[utils_recodevcf__primary__dna]
    module = Utils
    submodule = RecodeVCF
    docker_image = pipeline_tools

    input_from = annovar__primary__dna

    final_output = recoded_vcf

    [[args]]
        nr_cpus = 8
        mem     = 30

[gatk_filtersamreads__spliced__altaware__dna]
    module          = GATK
    submodule       = FilterSamReads
    docker_image    = gatk4

    input_from      = utils_getreadnames__spliced__dna, picard_markduplicates__bwa__altaware__dna

    final_output    = bam

    [[args]]
        gatk_version    = 4
        ref             = ref
        ref_dict        = ref_dict
        ref_idx         = ref_idx
        exclude_reads   = True

[samtools_index__gatk_filtersamreads__spliced__altaware__dna]
    module          = Samtools
    submodule       = Index
    docker_image    = samtools

    input_from      = gatk_filtersamreads__spliced__altaware__dna

    final_output    = bam_idx

[gatk_haplotypecaller__vcf__altaware__dna]
    module = GATK
    submodule = HaplotypeCaller
    docker_image = gatk4

    input_from = gatk_filtersamreads__spliced__altaware__dna, samtools_index__gatk_filtersamreads__spliced__altaware__dna, gatk_bedtointervallist__ontarget__dna

    final_output = vcf_gz, vcf_idx

    [[args]]
        gatk_version = 4
        ref = ref
        ref_dict = ref_dict
        ref_idx = ref_idx
        output_type = vcf

[utils_gunzipvcf__altaware__dna]

    module          = Utils
    submodule       = GunzipVCF
    docker_image    = gunzip

    input_from      = gatk_haplotypecaller__vcf__altaware__dna

    final_output    = vcf

[bcftools_bcftoolsnorm__altaware__dna]
    module = Bcftools
    submodule = BCFToolsNorm
    docker_image = bcftools

    input_from = utils_gunzipvcf__altaware__dna

    final_output = vcf

    [[args]]
        ref = ref

[annovar__altaware__dna]
    module          = Annovar

    input_from      = bcftools_bcftoolsnorm__altaware__dna

    final_output    = vcf

    [[args]]
        dbdir   = "/ref/annovar/humandb"
        operations = "g,r,f,f,f,f,f,f,f,f,f,f,f,f"
        protocol = "refGene,genomicSuperDups,exac03,gnomad_exome,gnomad_genome,avsnp150,esp6500siv2_all,1000g2015aug_all,cosmic87_coding,cosmic87_noncoding,dbnsfp35a,cadd14gt10,nci60,clinvar_20180603"
        buildver = "hg38"

[utils_recodevcf__altaware__dna]
    module = Utils
    submodule = RecodeVCF
    docker_image = pipeline_tools

    input_from = annovar__altaware__dna

    final_output = recoded_vcf

    [[args]]
        nr_cpus = 8
        mem     = 30
